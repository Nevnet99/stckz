---
import { getCollection } from "astro:content";
import Footer from "../components/Footer.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import StackTeaser from "../components/StackTeaser.astro";
import CheckboxGroup from "../components/CheckboxGroup.astro";

const stacks = await getCollection("stacks");

const uniqueCategories = [
  ...new Set(stacks.map((stack) => stack.data.category).flat()),
];
const uniqueTags = [...new Set(stacks.map((stack) => stack.data.tags).flat())];
---

<BaseLayout>
  <div
    class="flex justify-center flex-col items-center py-20 px-12"
    x-data="filterCards"
  >
    <header class="flex flex-col items-center">
      <h1 class="type-outline-lg mb-4">Stckz</h1>
      <h2 class="type-h2 mb-12 text-center md:max-w-[60%] brightness-150">
        A one stop shop for ramblings and modern web development stacks.
      </h2>
    </header>

    <main class="grid gap-3 md:grid-cols-[12rem,1fr] w-full">
      <section class="sticky top-3 flex flex-col bg-base-200 h-fit">
        <CheckboxGroup
          options={uniqueCategories}
          optionProps={(option: string) => ({
            "aria-label": `Filter by ${option} category`,
            "@click": `toggleCategory('${option}')`,
          })}
          title="Categories"
        />
        <CheckboxGroup
          options={uniqueTags}
          optionProps={(option: string) => ({
            "aria-label": `Filter by ${option} tag`,
            "@click": `toggleTag('${option}')`,
          })}
          title="Tags"
        />
      </section>

      <section class="list-none flex flex-wrap gap-6">
        {
          stacks.map((stack) => (
            <StackTeaser
              stack={stack}
              x-show={`shouldShowCard(${JSON.stringify({
                category: stack.data.category,
                tags: stack.data.tags,
              })})`}
            />
          ))
        }
      </section>
    </main>
  </div>

  <Footer />
</BaseLayout>

<script>
  import Alpine from "alpinejs";

  const DELIMITER = "|";

  document.addEventListener("alpine:init", () => {
    Alpine.data("filterCards", function () {
      let queryParams = new URLSearchParams(window.location.search);

      return {
        categories: Array.from(
          queryParams.get("categories")?.split(DELIMITER) || []
        ) as string[],
        tags: Array.from(
          queryParams.get("tags")?.split(DELIMITER) || []
        ) as string[],

        init() {
          this.$watch("categories", (categories) => {
            const url = new URL(window.location.href);
            if (categories.length > 0) {
              url.searchParams.set("categories", categories.join(DELIMITER));
            } else {
              url.searchParams.delete("categories");
            }
            history.pushState({}, "", url.toString());
          });

          this.$watch("tags", () => {
            const url = new URL(window.location.href);
            if (this.tags.length > 0) {
              url.searchParams.set("tags", this.tags.join(DELIMITER));
            } else {
              url.searchParams.delete("tags");
            }
            history.pushState({}, "", url.toString());
          });
        },

        shouldShowCard(args: { category?: string[]; tags?: string[] }) {
          if (this.categories.length === 0 && this.tags.length === 0) {
            return true;
          }
          return (
            // Logic sucks...it's just a demo
            (args.category || []).some((item) =>
              this.categories.includes(item)
            ) || (args.tags || []).some((item) => this.tags.includes(item))
          );
        },
        toggleCategory(id: string) {
          this.categories = this.categories.includes(id)
            ? this.categories.filter((item) => item !== id)
            : [...this.categories, id];
        },
        toggleTag(id: string) {
          this.tags = this.tags.includes(id)
            ? this.tags.filter((item) => item !== id)
            : [...this.tags, id];
        },
      };
    });
  });
</script>
